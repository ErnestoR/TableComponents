/// <reference types="node" />
import { EventEmitter } from 'events';
export declare class StrictEventEmitter<EventMap extends Record<string | symbol, any>> extends EventEmitter {
    constructor();
    on<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
    once<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
    off<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
    emit<K extends keyof EventMap>(event: K, ...data: Parameters<EventMap[K]>): boolean;
    addListener<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
    prependListener<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
    prependOnceListener<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
    removeListener<K extends keyof EventMap>(event: K, listener: EventMap[K]): this;
    eventNames(): Array<keyof EventMap>;
    listeners<K extends keyof EventMap>(event: K): Array<EventMap[K]>;
    rawListeners<K extends keyof EventMap>(event: K): Array<EventMap[K]>;
    listenerCount<K extends keyof EventMap>(event: K): number;
}
